name: Build and Provide artifacts

on:
  workflow_dispatch:
  push:
    tags: ["v*.*.*"]


jobs:
  build-linux:
    name: Build for Linux and Provide artifacts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build for all platforms
        run: yarn make -p linux

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: test-desktop-linux
          path: ./packages/test-desktop/out/*/*.*
          retention-days: 7

  build-macos:
    name: Build for MacOS and Provide artifacts
    runs-on: macos-12

    steps:
        - name: Checkout Repository
          uses: actions/checkout@v3

        - name: Change node version
          uses: actions/setup-node@v3
          with:
              node-version: '18'

        - name: Install the Apple certificate and provisioning profile
          env:
            MACOS_BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_BUILD_CERTIFICATE_BASE64 }}
            MACOS_P12_PASSWORD: ${{ secrets.MACOS_P12_PASSWORD }}
            MACOS_BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MACOS_BUILD_PROVISION_PROFILE_BASE64 }}
            MACOS_KEYCHAIN_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
          run: |
            # create variables
            CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
            PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
            KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

            # import certificate and provisioning profile from secrets
            echo -n "$MACOS_BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
            echo -n "$MACOS_BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

            # create temporary keychain
            security create-keychain -p "$MACOS_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
            security unlock-keychain -p "$MACOS_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

            # import certificate to keychain
            security import $CERTIFICATE_PATH -P "$MACOS_P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
            security list-keychain -d user -s $KEYCHAIN_PATH

            # apply provisioning profile
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

        - name: Check code signing setup
          run: security find-identity -p codesigning -v

        - name: Install dependencies
          run: yarn install --frozen-lockfile

        - name: Build for MacOS platform
          env:
            APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
            APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
            APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
            NODE_ENV: production
          run: |
            export APPLE_API_KEY_PATH=$RUNNER_TEMP/siera-apple-api-key.p8

            echo -n "$APPLE_API_KEY_BASE64" | base64 --decode --output $APPLE_API_KEY_PATH

            sudo spctl --master-disable
            
            yarn make -p darwin --arch x64,arm64

        - name: Upload artifacts
          uses: actions/upload-artifact@v3
          with:
            name: test-desktop-macos-${{ matrix.arch }}
            path: ./packages/test-desktop/out/*/*.*
            retention-days: 7

  build-windows:
    name: Build for Windows and Provide artifacts
    runs-on: windows-2019

    steps:
        - name: Checkout Repository
          uses: actions/checkout@v3

        - name: Setup Libindy and install dependencies
          run: yarn install --frozen-lockfile

        - name: Build for all platforms
          run: yarn make -p win32

        - name: Upload artifacts
          uses: actions/upload-artifact@v3
          with:
            name: test-desktop-windows
            path: ./packages/test-desktop/out/*/*.*
            retention-days: 7

  release:
    name: Create Github release with artifacts
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos, build-linux]

    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    steps:
      - name: Download built binaries
        uses: actions/download-artifact@v3
      - run: |
          mv ./*/*/* .
          
          rm -rf ./windows ./darwin ./linux

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: '*.*'